generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Modoule
enum UserStatus {
  INACTIVE
  ACTIVE
  BLOCKED
}

model User {
  id              String      @id @default(uuid())
  email           String      @unique
  password        String?
  country         String?
  timezone        String?
  name            String?
  roleId          String
  status          UserStatus  @default(INACTIVE) // Status of the invitation
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  lastSignInAt    DateTime?
  emailVerifiedAt DateTime?
  isTrashed       Boolean     @default(false)
  avatar          String?
  invitedByUserId String?
  isProtected     Boolean     @default(false) // Prevents deletion/modification
  role            UserRole    @relation(fields: [roleId], references: [id])
  systemLog       SystemLog[]
  accounts        Account[]
  Session         Session[]

  // Indexes for efficient querying
  @@index([invitedByUserId])
  @@index([roleId])
  @@index([status])
}

model UserRole {
  id              String               @id @default(uuid())
  slug            String               @unique
  name            String               @unique
  description     String?
  isTrashed       Boolean              @default(false)
  createdByUserId String?
  createdAt       DateTime             @default(now())
  isProtected     Boolean              @default(false)
  isDefault       Boolean              @default(false)
  users           User[]
  permissions     UserRolePermission[]
}

model UserPermission {
  id              String               @id @default(uuid())
  slug            String               @unique
  name            String
  description     String?
  createdByUserId String?
  createdAt       DateTime             @default(now())
  roles           UserRolePermission[]
}

model UserRolePermission {
  id           String   @id @default(uuid())
  roleId       String
  permissionId String
  assignedAt   DateTime @default(now())

  role       UserRole       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission UserPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SystemLog {
  id          String   @id @default(uuid())
  userId      String
  createdAt   DateTime @default(now())
  entityId    String?
  entityType  String?
  event       String?
  description String?
  ipAddress   String?
  meta        String?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SystemSetting {
  id             String  @id @default(uuid())
  name           String  @default("My Company")
  logo           String?
  active         Boolean @default(true)
  address        String?
  websiteURL     String?
  supportEmail   String?
  supportPhone   String?
  language       String  @default("en")
  timezone       String  @default("UTC")
  currency       String  @default("USD")
  currencyFormat String  @default("$ {value}")

  socialFacebook  String?
  socialTwitter   String?
  socialInstagram String?
  socialLinkedIn  String?
  socialPinterest String?
  socialYoutube   String?

  notifyStockEmail               Boolean  @default(true)
  notifyStockWeb                 Boolean  @default(true)
  notifyStockThreshold           Int      @default(10)
  notifyStockRoleIds             String[]
  notifyNewOrderEmail            Boolean  @default(true)
  notifyNewOrderWeb              Boolean  @default(true)
  notifyNewOrderRoleIds          String[]
  notifyOrderStatusUpdateEmail   Boolean  @default(true)
  notifyOrderStatusUpdateWeb     Boolean  @default(true)
  notifyOrderStatusUpdateRoleIds String[]
  notifyPaymentFailureEmail      Boolean  @default(true)
  notifyPaymentFailureWeb        Boolean  @default(true)
  notifyPaymentFailureRoleIds    String[]
  notifySystemErrorFailureEmail  Boolean  @default(true)
  notifySystemErrorWeb           Boolean  @default(true)
  notifySystemErrorRoleIds       String[]
}

// Service Centers Module
enum ServiceCenterStatus {
  DRAFT
  ACTIVE
  INACTIVE
  NEEDS_REVIEW
}

enum VocabularyStatus {
  ACTIVE
  INACTIVE
}

model ServiceCenterType {
  id             String               @id @default(uuid())
  name           String               @unique
  description    String?
  status         VocabularyStatus     @default(ACTIVE)
  usageCount     Int                  @default(0)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  serviceCenters ServiceCenter[]

  @@index([status])
}

model VehicleBrand {
  id             String                @id @default(uuid())
  name           String                @unique
  description    String?
  logoUrl        String?
  status         VocabularyStatus      @default(ACTIVE)
  usageCount     Int                   @default(0)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  serviceCenters ServiceCenterBrand[]

  @@index([status])
}

model ServiceType {
  id             String                 @id @default(uuid())
  name           String                 @unique
  description    String?
  status         VocabularyStatus       @default(ACTIVE)
  usageCount     Int                    @default(0)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  serviceCenters ServiceCenterService[]

  @@index([status])
}

model ServiceCenter {
  id                  String                 @id @default(uuid())
  name                String
  typeId              String
  description         String?                @db.Text
  
  // Contact Details
  primaryContactName  String
  primaryPhone        String
  secondaryPhone      String?
  email               String?
  website             String?
  whatsapp            String?
  hoursJson           Json?
  
  // Address
  address1            String
  address2            String?
  landmark            String?
  city                String
  state               String
  pincode             String
  country             String                 @default("India")
  latitude            Float?
  longitude           Float?
  
  // Capabilities
  specializations     String[]
  facilities          String[]
  serviceRadiusKm     Int?
  
  // Operational
  status              ServiceCenterStatus    @default(DRAFT)
  visibility          Boolean                @default(false)
  slug                String                 @unique
  ownerNotes          String?                @db.Text
  
  // Media
  logoUrl             String?
  galleryUrls         String[]
  documentUrls        String[]
  
  // Audit
  createdBy           String?
  updatedBy           String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  
  // Relations
  type                ServiceCenterType      @relation(fields: [typeId], references: [id])
  brands              ServiceCenterBrand[]
  services            ServiceCenterService[]
  
  @@unique([name, city, status])
  @@index([typeId])
  @@index([city])
  @@index([state])
  @@index([status])
  @@index([visibility])
  @@index([slug])
}

model ServiceCenterBrand {
  id              String        @id @default(uuid())
  serviceCenterId String
  brandId         String
  createdAt       DateTime      @default(now())
  
  serviceCenter   ServiceCenter @relation(fields: [serviceCenterId], references: [id], onDelete: Cascade)
  brand           VehicleBrand  @relation(fields: [brandId], references: [id], onDelete: Cascade)
  
  @@unique([serviceCenterId, brandId])
  @@index([serviceCenterId])
  @@index([brandId])
}

model ServiceCenterService {
  id              String        @id @default(uuid())
  serviceCenterId String
  serviceTypeId   String
  createdAt       DateTime      @default(now())
  
  serviceCenter   ServiceCenter @relation(fields: [serviceCenterId], references: [id], onDelete: Cascade)
  serviceType     ServiceType   @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)
  
  @@unique([serviceCenterId, serviceTypeId])
  @@index([serviceCenterId])
  @@index([serviceTypeId])
}

// Vehicles Module
enum VehicleCondition {
  NEW
  USED
}

enum VehicleStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  RESERVED
  SOLD
  ARCHIVED
}

model VehicleMake {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  logoUrl     String?
  status      VocabularyStatus @default(ACTIVE)
  usageCount  Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  models      VehicleModel[]
  vehicles    Vehicle[]
  
  @@index([status])
  @@index([name])
}

model VehicleModel {
  id          String           @id @default(uuid())
  makeId      String
  name        String
  description String?
  status      VocabularyStatus @default(ACTIVE)
  usageCount  Int              @default(0)
  
  // Model-level defaults (optional prefill)
  defaultsJson Json?
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  make        VehicleMake      @relation(fields: [makeId], references: [id])
  variants    VehicleVariant[]
  vehicles    Vehicle[]
  
  @@unique([makeId, name])
  @@index([makeId])
  @@index([status])
}

model VehicleVariant {
  id          String           @id @default(uuid())
  modelId     String
  name        String
  description String?
  status      VocabularyStatus @default(ACTIVE)
  usageCount  Int              @default(0)
  
  // Variant-level defaults for prefill
  defaultsJson Json?
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  model       VehicleModel     @relation(fields: [modelId], references: [id])
  vehicles    Vehicle[]
  
  @@unique([modelId, name])
  @@index([modelId])
  @@index([status])
}

model VehicleBodyType {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  status      VocabularyStatus @default(ACTIVE)
  usageCount  Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  vehicles    Vehicle[]
  
  @@index([status])
}

model VehicleAxleConfig {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  status      VocabularyStatus @default(ACTIVE)
  usageCount  Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  vehicles    Vehicle[]
  
  @@index([status])
}

model VehicleFuelType {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  status      VocabularyStatus @default(ACTIVE)
  usageCount  Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  vehicles    Vehicle[]
  
  @@index([status])
}

model VehicleEmissionNorm {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  status      VocabularyStatus @default(ACTIVE)
  usageCount  Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  vehicles    Vehicle[]
  
  @@index([status])
}

model VehicleTransmission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  status      VocabularyStatus @default(ACTIVE)
  usageCount  Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  vehicles    Vehicle[]
  
  @@index([status])
}

model VehicleFeatureTag {
  id          String               @id @default(uuid())
  name        String               @unique
  description String?
  status      VocabularyStatus     @default(ACTIVE)
  usageCount  Int                  @default(0)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  
  vehicles    VehicleFeatureMap[]
  
  @@index([status])
}

model Vehicle {
  id                   String             @id @default(uuid())
  slug                 String             @unique
  title                String
  condition            VehicleCondition
  
  // Taxonomy
  makeId               String
  modelId              String
  variantId            String?
  bodyTypeId           String
  axleConfigId         String
  
  // Year & Key Specs
  modelYear            Int
  wheelbaseMm          Int?
  gvwT                 Float?
  gcwT                 Float?
  payloadT             Float?
  
  // Engine & Driveline
  engineCc             Int?
  powerHp              Float?
  powerKw              Float?
  torqueNm             Float?
  fuelTypeId           String?
  emissionNormId       String?
  transmissionId       String?
  gears                Int?
  finalDriveRatio      String?
  
  // Chassis & Cabin
  cabinType            String?            // Day/Sleeper
  hasAc                Boolean            @default(false)
  suspensionFront      String?
  suspensionRear       String?
  brakeType            String?
  tyreSize             String?
  tyreCount            Int?
  
  // Dimensions
  overallLengthMm      Int?
  overallWidthMm       Int?
  overallHeightMm      Int?
  loadBodyLengthMm     Int?
  loadBodyWidthMm      Int?
  loadBodyHeightMm     Int?
  turningRadiusM       Float?
  
  // Commercials (Frontend)
  askingPriceInr       Float
  negotiable           Boolean            @default(false)
  financeAvailable     Boolean            @default(false)
  gstSlab              String?
  
  // Commercials (Internal Only)
  vendorPriceInr       Float?
  targetMarginInr      Float?
  
  // Location & Seller
  sellerId             String?
  city                 String
  state                String
  pincode              String
  latitude             Float?
  longitude            Float?
  contactPhone         String
  contactWhatsapp      String?
  
  // Used Vehicle Docs (conditional)
  regNo                String?
  regDate              DateTime?
  ownershipCount       Int?
  insuranceType        String?
  insuranceExpiry      DateTime?
  fitnessExpiry        DateTime?
  pucExpiry            DateTime?
  permitStatesJson     Json?              // Array of states
  hypothecationBank    String?
  
  // Media
  coverUrl             String?
  galleryJson          Json?              // Ordered array of image URLs
  videoUrl             String?
  brochureUrl          String?
  watermarkEnabled     Boolean            @default(true)
  
  // SEO
  metaTitle            String?
  metaDescription      String?
  
  // Workflow
  status               VehicleStatus      @default(DRAFT)
  visibility           Boolean            @default(false)
  reservedUntil        DateTime?
  
  // Denormalized for fast frontend
  keySpecs             String?            // e.g., "4023 • 6×4 • 55t GVW • BS-VI"
  
  // Audit
  createdBy            String?
  updatedBy            String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  // Relations
  make                 VehicleMake        @relation(fields: [makeId], references: [id])
  model                VehicleModel       @relation(fields: [modelId], references: [id])
  variant              VehicleVariant?    @relation(fields: [variantId], references: [id])
  bodyType             VehicleBodyType    @relation(fields: [bodyTypeId], references: [id])
  axleConfig           VehicleAxleConfig  @relation(fields: [axleConfigId], references: [id])
  fuelType             VehicleFuelType?   @relation(fields: [fuelTypeId], references: [id])
  emissionNorm         VehicleEmissionNorm? @relation(fields: [emissionNormId], references: [id])
  transmission         VehicleTransmission? @relation(fields: [transmissionId], references: [id])
  features             VehicleFeatureMap[]
  
  @@unique([regNo, state], name: "unique_reg_per_state")
  @@index([makeId])
  @@index([modelId])
  @@index([bodyTypeId])
  @@index([axleConfigId])
  @@index([fuelTypeId])
  @@index([emissionNormId])
  @@index([city])
  @@index([state])
  @@index([modelYear])
  @@index([askingPriceInr])
  @@index([status])
  @@index([visibility])
  @@index([condition])
  @@index([slug])
}

model VehicleFeatureMap {
  id           String            @id @default(uuid())
  vehicleId    String
  featureTagId String
  createdAt    DateTime          @default(now())
  
  vehicle      Vehicle           @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  featureTag   VehicleFeatureTag @relation(fields: [featureTagId], references: [id], onDelete: Cascade)
  
  @@unique([vehicleId, featureTagId])
  @@index([vehicleId])
  @@index([featureTagId])
}
