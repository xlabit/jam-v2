Perfect ‚Äî here‚Äôs the **updated Replit-friendly build prompt (no source code)** for the **Admin ‚Üí Service Centers** module with **Section H (Import/Export)** fully excluded. I‚Äôve removed all Import/Export references from scope, IA, acceptance criteria, testing steps, and deliverables. Copy-paste this into your dev assistant.

---

# üîß Master Build Prompt (No Source Code) ‚Äî **Admin ‚Üí Service Centers** for JainAutomart

**Context:** Replit project, Next.js (App Router), React, Metronic theme already integrated. Secure admin area exists under `/jammanage` with authenticated access.

> **Act as a senior Next.js engineer using Metronic.** Implement the **Admin ‚Üí Service Centers** module exactly as specified. Do **not** print large code blocks unless I ask for a specific file. First, confirm directory/file scaffolding, then implement iteratively. Keep secrets in env only. Use server-side validation for all mutations.

---

## A) Objectives & Scope

1. Create Admin CRUD for **Service Centers** with controlled vocabularies:

   * **Service Center Types** (single select)
   * **Vehicle Brands** (multi select)
   * **Service Types** (multi select)
2. Provide List, Create/Edit, View, Archive/Restore, and soft delete (where applicable).
3. Ensure Metronic-consistent UI (tables, forms, filters, toasts, modals).
4. Prepare data structures for a future frontend finder (filters by brand, service, city, state).

---

## B) Tech Constraints & Conventions

* **Next.js 14+ App Router** with server actions (where suited) and API routes where needed.
* **Server-side validation** for all create/update operations.
* **Metronic components & classes** for all forms and tables.
* **Pagination, sorting, filtering** must be server-driven (scalable).
* **Audit log** entries for create/update/status changes.
* **Soft delete / Archive** for Service Centers and vocabularies; avoid hard delete when referenced.

---

## C) Information Architecture & Routes (no code)

**Admin Sidebar (under `/jammanage`)**

* **Service Centers**

  * List: `/jammanage/service-centers`
  * New: `/jammanage/service-centers/new`
  * Edit: `/jammanage/service-centers/{id}`
  * View (optional): `/jammanage/service-centers/{id}/view`
* **Service Center Types**: `/jammanage/service-center-types`
* **Vehicle Brands**: `/jammanage/vehicle-brands`
* **Service Types**: `/jammanage/service-types`

> Keep a **Quick-Add** modal for each vocabulary, callable from the Service Center form (adds, returns, and preselects the created option).

---

## D) Data Model (implementation blueprint, no code)

**Tables/Collections:**

* `service_centers`
* `service_center_types`
* `vehicle_brands`
* `service_types`
* `service_center_brand_map` (M:N)
* `service_center_service_map` (M:N)
* `admin_audit_logs`

**Service Center ‚Äî Fields**

* `id` (uuid)
* `name` (string, 3‚Äì120, required; unique with `city` when Active)
* `type_id` (fk ‚Üí service_center_types, required)
* `description` (rich text, optional)
* Contacts:

  * `primary_contact_name` (string, required)
  * `primary_phone` (string, E.164, required)
  * `secondary_phone` (string, optional)
  * `email` (email, optional)
  * `website` (url, optional)
  * `whatsapp` (string, optional)
  * `hours_json` (json schedule, optional)
* Address:

  * `address1` (required), `address2` (optional), `landmark` (optional)
  * `city` (required), `state` (required), `pincode` (required, India 6-digit), `country` (required; default ‚ÄúIndia‚Äù)
  * `lat`/`lng` (optional)
* Capabilities:

  * `brand_ids` (M:N; ‚â•1 required)
  * `service_type_ids` (M:N; ‚â•1 required)
  * `specializations` (string[]/tags, optional)
  * `facilities` (string[] enum, optional; e.g., Pick & Drop, Cashless, EV Fast Charging)
  * `service_radius_km` (number, optional)
* Ops:

  * `status` (enum: Draft/Active/Inactive/NeedsReview, required)
  * `visibility` (boolean; show on frontend)
  * `slug` (auto: `name-city-state`)
  * `created_by`, `updated_by`, `created_at`, `updated_at`

**Vocabularies (all):**

* `id`, `name` (unique), `description` (optional), `status` (Active/Inactive), usage count, timestamps.
* `vehicle_brands` may include `logo_url` (optional).

**Integrity:**

* Prevent **hard delete** when in use; allow Inactivate to hide from selects.

---

## E) Service Centers ‚Äî List View (no code)

**Path:** `/jammanage/service-centers`
**Table Columns:**

* ‚ñ° (bulk) | **Name** (link to Edit) | **Type** | **Brands** (‚â§3 + ‚Äú+N‚Äù) | **Services** (‚â§3 + ‚Äú+N‚Äù) | **City, State** | **Primary Phone** | **Status** | **Updated** | **Actions** (Edit ‚Ä¢ View ‚Ä¢ Duplicate ‚Ä¢ Archive)

**Controls:**

* Search (name, phone, email, city, state, pincode, slug)
* Filters: Type (single), Brands (multi), Service Types (multi), Status (multi), City/State (typeahead)
* Sort: Name, Updated, City, State
* Pagination: 10/25/50/100
* Bulk actions: Activate, Deactivate, Archive
* **Empty state** with CTA ‚ÄúAdd your first Service Center‚Äù

**Performance target:** ‚â§500ms server response for 1k rows (paged).

---

## F) Service Centers ‚Äî Create/Edit Form (no code)

**Paths:**

* Create: `/jammanage/service-centers/new`
* Edit: `/jammanage/service-centers/{id}`

**Header Actions (sticky):** Save Draft ‚Ä¢ Save & Publish ‚Ä¢ Save & Continue ‚Ä¢ Cancel ‚Ä¢ (More) Duplicate ‚Ä¢ Archive

**Sections & Fields:**

1. **Basic Info**

   * Service Center Name (required)
   * Type (required; from Service Center Types; **Quick-Add**)
   * Description (rich text)
2. **Contact Details**

   * Primary Contact Person (required)
   * Primary Phone (required, E.164)
   * Secondary Phone (optional)
   * Email (optional)
   * Website (optional)
   * WhatsApp (optional; ‚ÄúSame as Primary‚Äù toggle)
   * Working Hours (weekly schedule builder)
3. **Address & Location**

   * Address1 (required), Address2, Landmark
   * City (required), State (required), Pincode (required), Country (required, default India)
   * Latitude/Longitude (optional), ‚ÄúPin on Map‚Äù stub (phase-2)
4. **Capabilities**

   * Vehicle Brands (multi, **‚â•1 required**; **Quick-Add**)
   * Service Types (multi, **‚â•1 required**; **Quick-Add**)
   * Specializations (tags)
   * Facilities (checkbox group)
   * Service Radius (km)
5. **Media** (optional v1)

   * Logo, Gallery (images), Documents (PDF)
6. **Operational Flags**

   * Status (Draft/Active/Inactive/NeedsReview)
   * Visibility (Show on frontend)
   * Owner Notes (internal)

**Sidebar Meta:** Record ID/Slug (RO), Created/Updated by + timestamps, Audit Log link

**Validation:**
Required fields as above; email/url formats; India pincode 6-digit; unique (Name + City) when publishing Active.

**Save Outcomes:** Toast success; remain on edit; links to ‚ÄúGo to List‚Äù and ‚ÄúView‚Äù.

---

## G) Vocabulary Screens (no code)

**Paths:**

* Types: `/jammanage/service-center-types`
* Brands: `/jammanage/vehicle-brands`
* Service Types: `/jammanage/service-types`

**List:** Name | Status | Usage Count | Updated | Actions (Edit ‚Ä¢ Inactivate ‚Ä¢ View usage)
**Form:** Name (required), Description/Logo (for Brand), Status
**Guards:** If ‚Äúin use‚Äù ‚Üí disable hard delete; allow Inactivate.
**Quick-Add:** consistent modal used from main form, returns selected value.

---

## I) Metronic Field Mapping Checklist (use strictly)

Use these exact Metronic components/styles. Keep labels, helper text, and error states consistent.

| Section      | Field                  | Metronic Component                 | Layout/UX                                   | Validation & Notes                            |
| ------------ | ---------------------- | ---------------------------------- | ------------------------------------------- | --------------------------------------------- |
| Basic Info   | Service Center Name    | `form-control` text                | 2-col grid, label top, helper ‚Äú3‚Äì120 chars‚Äù | Required; 3‚Äì120; unique with City when Active |
| Basic Info   | Type                   | **KT Select** (single, searchable) | Full width                                  | Required; **Quick-Add Modal** to Types        |
| Basic Info   | Description            | `textarea` / rich text             | Full width                                  | Optional                                      |
| Contact      | Primary Contact Person | `form-control` text                | 2-col                                       | Required                                      |
| Contact      | Primary Phone          | `input-group` + phone icon         | E.164 hint                                  | Required; phone pattern                       |
| Contact      | Secondary Phone        | `form-control`                     | Right col                                   | Optional                                      |
| Contact      | Email                  | `form-control` email               | 2-col                                       | RFC format                                    |
| Contact      | Website                | `form-control` url                 | 2-col                                       | URL format                                    |
| Contact      | WhatsApp               | `form-control` tel                 | 2-col                                       | ‚ÄúSame as Primary‚Äù toggle                      |
| Contact      | Working Hours          | KT schedule pattern                | Weekly rows, Closed toggle                  | Optional                                      |
| Address      | Address1               | `form-control`                     | Full width                                  | Required                                      |
| Address      | Address2               | `form-control`                     | Full width                                  | Optional                                      |
| Address      | Landmark               | `form-control`                     | Full width                                  | Optional                                      |
| Address      | City                   | **Typeahead**                      | Row with State/Pincode                      | Required                                      |
| Address      | State                  | **Typeahead**                      |                                             | Required                                      |
| Address      | Pincode                | `form-control`                     |                                             | Required; 6 digits (IN)                       |
| Address      | Country                | **KT Select**                      | Default ‚ÄúIndia‚Äù                             | Required                                      |
| Geo          | Latitude/Longitude     | `input-group` numeric              | Map-pin icon                                | Optional                                      |
| Capabilities | Vehicle Brands         | **KT Select** (multi + chips)      | Show selected as badges                     | **‚â•1 required**; **Quick-Add**                |
| Capabilities | Service Types          | **KT Select** (multi + chips)      |                                             | **‚â•1 required**; **Quick-Add**                |
| Capabilities | Specializations        | **Tagify**                         | Freeform tags                               | Optional                                      |
| Capabilities | Facilities             | Checkbox group                     | 2 columns                                   | Optional                                      |
| Capabilities | Service Radius (km)    | `form-control` number              | Suffix ‚Äúkm‚Äù                                 | Optional                                      |
| Ops          | Status                 | **KT Select** or segmented control | Sticky actions honor publish guard          | Required                                      |
| Ops          | Visibility             | Switch                             |                                             | Required                                      |
| Media        | Logo/Gallery           | **KT Image Input**                 | Previews                                    | Optional                                      |

**List/Table Mapping**

* KT Datatable, server pagination & filters, pill badges for Status, tooltips for Updated.

**Toasts & Alerts**

* Use Metronic toast for success; inline invalid feedback for field errors.

---

## J) Validation & Workflow Rules

* **Draft**: allow partial save.
* **Publish (Active)**: enforce all required fields + uniqueness (Name+City).
* **Inactive**: hidden from frontend.
* **NeedsReview**: internal staging.
* **Vocab deletion**: disable if in use; suggest Inactivate.
* **Audit log** every create/update/archive with who/when/what changed (key fields diff).

---

## K) Permissions

* Only **Site Owner/Admin** can CRUD Service Centers and vocabularies and see Audit logs. (Vendor flows later.)

---

## L) Acceptance Criteria (QA Checklist)

* [ ] Sidebar entries present; navigation matches paths.
* [ ] Service Centers **List** supports search, filters, sort, pagination, bulk actions.
* [ ] **Create/Edit** form matches mapping; validations enforced server-side.
* [ ] **Quick-Add** vocab modals function and return selected value.
* [ ] **Status workflow** respected; publishing guard blocks invalid records.
* [ ] **Audit logs** captured for CRUD and status changes.
* [ ] **Soft delete/Archive** works; prevents hard delete when referenced.
* [ ] Performance baseline achieved (paged list ‚â§500ms for 1k rows).

---

## M) Testing Steps (manual)

1. Create 3 Types; 6 Brands; 8 Service Types.
2. Add one Service Center with minimal required fields ‚Üí Save Draft.
3. Publish it (Active) ‚Üí ensure validations pass.
4. Attempt duplicate Name + City Active ‚Üí expect error.
5. Inactivate a brand used by a center ‚Üí center remains valid; brand hidden from future selection.
6. Archive a Service Center ‚Üí ensure not shown in default list; restorable.
7. Confirm Audit log entries for each action.

---

## N) Deliverables (no code dump)

When done, provide:

* Confirmed **route map** and **files created**.
* Screenshots/notes showing **List**, **Create/Edit**, and **Vocab** screens.
* A brief summary explaining how the implementation meets Sections A‚ÄìL.

---

**Proceed with implementation as specified. Do not print file contents unless I ask for a specific file. When ready, report completion against the Acceptance Criteria and Testing Steps.**
